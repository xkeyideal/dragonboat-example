// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.3
// source: moveto.proto

package moveto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MoveToStatus int32

const (
	MoveToStatus_Success MoveToStatus = 0 // 命中可执行命令的节点
	MoveToStatus_Miss    MoveToStatus = 1 // 没命中可执行命令的节点
)

// Enum value maps for MoveToStatus.
var (
	MoveToStatus_name = map[int32]string{
		0: "Success",
		1: "Miss",
	}
	MoveToStatus_value = map[string]int32{
		"Success": 0,
		"Miss":    1,
	}
)

func (x MoveToStatus) Enum() *MoveToStatus {
	p := new(MoveToStatus)
	*p = x
	return p
}

func (x MoveToStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveToStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_moveto_proto_enumTypes[0].Descriptor()
}

func (MoveToStatus) Type() protoreflect.EnumType {
	return &file_moveto_proto_enumTypes[0]
}

func (x MoveToStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoveToStatus.Descriptor instead.
func (MoveToStatus) EnumDescriptor() ([]byte, []int) {
	return file_moveto_proto_rawDescGZIP(), []int{0}
}

type MoveToCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 根据hashkey计算的shardId
	ShardId uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// shard revision
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// todo command bytes array
	Cmd []byte `protobuf:"bytes,4,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *MoveToCommand) Reset() {
	*x = MoveToCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moveto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToCommand) ProtoMessage() {}

func (x *MoveToCommand) ProtoReflect() protoreflect.Message {
	mi := &file_moveto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToCommand.ProtoReflect.Descriptor instead.
func (*MoveToCommand) Descriptor() ([]byte, []int) {
	return file_moveto_proto_rawDescGZIP(), []int{0}
}

func (x *MoveToCommand) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *MoveToCommand) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *MoveToCommand) GetCmd() []byte {
	if x != nil {
		return x.Cmd
	}
	return nil
}

type MoveToResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回的状态, 用于标记是否调转到可执行命令的节点上了
	Status MoveToStatus `protobuf:"varint,1,opt,name=status,proto3,enum=MoveToStatus" json:"status,omitempty"`
	// 没命中时，moveTo节点的shard集群分配版本号
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// 没命中时，建议跳转的节点
	RecommendAddr string `protobuf:"bytes,3,opt,name=recommend_addr,json=recommendAddr,proto3" json:"recommend_addr,omitempty"`
	Result        []byte `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MoveToResponse) Reset() {
	*x = MoveToResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moveto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToResponse) ProtoMessage() {}

func (x *MoveToResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moveto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToResponse.ProtoReflect.Descriptor instead.
func (*MoveToResponse) Descriptor() ([]byte, []int) {
	return file_moveto_proto_rawDescGZIP(), []int{1}
}

func (x *MoveToResponse) GetStatus() MoveToStatus {
	if x != nil {
		return x.Status
	}
	return MoveToStatus_Success
}

func (x *MoveToResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *MoveToResponse) GetRecommendAddr() string {
	if x != nil {
		return x.RecommendAddr
	}
	return ""
}

func (x *MoveToResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type RaftInvokeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Target    string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	ShardId   uint64 `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Op        uint32 `protobuf:"varint,4,opt,name=op,proto3" json:"op,omitempty"`
	Linear    bool   `protobuf:"varint,5,opt,name=linear,proto3" json:"linear,omitempty"`
	// per shard config revision
	Revision int64 `protobuf:"varint,6,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RaftInvokeOp) Reset() {
	*x = RaftInvokeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moveto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftInvokeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftInvokeOp) ProtoMessage() {}

func (x *RaftInvokeOp) ProtoReflect() protoreflect.Message {
	mi := &file_moveto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftInvokeOp.ProtoReflect.Descriptor instead.
func (*RaftInvokeOp) Descriptor() ([]byte, []int) {
	return file_moveto_proto_rawDescGZIP(), []int{2}
}

func (x *RaftInvokeOp) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RaftInvokeOp) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RaftInvokeOp) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RaftInvokeOp) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *RaftInvokeOp) GetLinear() bool {
	if x != nil {
		return x.Linear
	}
	return false
}

func (x *RaftInvokeOp) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

var File_moveto_proto protoreflect.FileDescriptor

var file_moveto_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58,
	0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa4, 0x01,
	0x0a, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x25, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x73, 0x10, 0x01, 0x32, 0x6f, 0x0a, 0x06, 0x4d,
	0x6f, 0x76, 0x65, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x0f, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x52, 0x61, 0x66, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0d, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x1a, 0x0f, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x3b, 0x6d, 0x6f, 0x76, 0x65, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moveto_proto_rawDescOnce sync.Once
	file_moveto_proto_rawDescData = file_moveto_proto_rawDesc
)

func file_moveto_proto_rawDescGZIP() []byte {
	file_moveto_proto_rawDescOnce.Do(func() {
		file_moveto_proto_rawDescData = protoimpl.X.CompressGZIP(file_moveto_proto_rawDescData)
	})
	return file_moveto_proto_rawDescData
}

var file_moveto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_moveto_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_moveto_proto_goTypes = []interface{}{
	(MoveToStatus)(0),      // 0: MoveToStatus
	(*MoveToCommand)(nil),  // 1: MoveToCommand
	(*MoveToResponse)(nil), // 2: MoveToResponse
	(*RaftInvokeOp)(nil),   // 3: RaftInvokeOp
}
var file_moveto_proto_depIdxs = []int32{
	0, // 0: MoveToResponse.status:type_name -> MoveToStatus
	1, // 1: MoveTo.MoveToInvoke:input_type -> MoveToCommand
	3, // 2: MoveTo.RaftNodeInvoke:input_type -> RaftInvokeOp
	2, // 3: MoveTo.MoveToInvoke:output_type -> MoveToResponse
	2, // 4: MoveTo.RaftNodeInvoke:output_type -> MoveToResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_moveto_proto_init() }
func file_moveto_proto_init() {
	if File_moveto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moveto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moveto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moveto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftInvokeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moveto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_moveto_proto_goTypes,
		DependencyIndexes: file_moveto_proto_depIdxs,
		EnumInfos:         file_moveto_proto_enumTypes,
		MessageInfos:      file_moveto_proto_msgTypes,
	}.Build()
	File_moveto_proto = out.File
	file_moveto_proto_rawDesc = nil
	file_moveto_proto_goTypes = nil
	file_moveto_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MoveToClient is the client API for MoveTo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoveToClient interface {
	MoveToInvoke(ctx context.Context, in *MoveToCommand, opts ...grpc.CallOption) (*MoveToResponse, error)
	RaftNodeInvoke(ctx context.Context, in *RaftInvokeOp, opts ...grpc.CallOption) (*MoveToResponse, error)
}

type moveToClient struct {
	cc grpc.ClientConnInterface
}

func NewMoveToClient(cc grpc.ClientConnInterface) MoveToClient {
	return &moveToClient{cc}
}

func (c *moveToClient) MoveToInvoke(ctx context.Context, in *MoveToCommand, opts ...grpc.CallOption) (*MoveToResponse, error) {
	out := new(MoveToResponse)
	err := c.cc.Invoke(ctx, "/MoveTo/MoveToInvoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moveToClient) RaftNodeInvoke(ctx context.Context, in *RaftInvokeOp, opts ...grpc.CallOption) (*MoveToResponse, error) {
	out := new(MoveToResponse)
	err := c.cc.Invoke(ctx, "/MoveTo/RaftNodeInvoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoveToServer is the server API for MoveTo service.
type MoveToServer interface {
	MoveToInvoke(context.Context, *MoveToCommand) (*MoveToResponse, error)
	RaftNodeInvoke(context.Context, *RaftInvokeOp) (*MoveToResponse, error)
}

// UnimplementedMoveToServer can be embedded to have forward compatible implementations.
type UnimplementedMoveToServer struct {
}

func (*UnimplementedMoveToServer) MoveToInvoke(context.Context, *MoveToCommand) (*MoveToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToInvoke not implemented")
}
func (*UnimplementedMoveToServer) RaftNodeInvoke(context.Context, *RaftInvokeOp) (*MoveToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftNodeInvoke not implemented")
}

func RegisterMoveToServer(s *grpc.Server, srv MoveToServer) {
	s.RegisterService(&_MoveTo_serviceDesc, srv)
}

func _MoveTo_MoveToInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveToServer).MoveToInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MoveTo/MoveToInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveToServer).MoveToInvoke(ctx, req.(*MoveToCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoveTo_RaftNodeInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftInvokeOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveToServer).RaftNodeInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MoveTo/RaftNodeInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveToServer).RaftNodeInvoke(ctx, req.(*RaftInvokeOp))
	}
	return interceptor(ctx, in, info, handler)
}

var _MoveTo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MoveTo",
	HandlerType: (*MoveToServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveToInvoke",
			Handler:    _MoveTo_MoveToInvoke_Handler,
		},
		{
			MethodName: "RaftNodeInvoke",
			Handler:    _MoveTo_RaftNodeInvoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moveto.proto",
}
