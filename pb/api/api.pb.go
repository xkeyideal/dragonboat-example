// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.3
// source: api.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Linearizable bool   `protobuf:"varint,2,opt,name=linearizable,proto3" json:"linearizable,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetRequest) GetLinearizable() bool {
	if x != nil {
		return x.Linearizable
	}
	return false
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val      []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Revision uint64 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetResponse) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *GetResponse) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *PutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutRequest) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Revision uint64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *PutResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutResponse) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type DelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DelRequest) Reset() {
	*x = DelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRequest) ProtoMessage() {}

func (x *DelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRequest.ProtoReflect.Descriptor instead.
func (*DelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *DelRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val      []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Revision uint64 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *DelResponse) Reset() {
	*x = DelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelResponse) ProtoMessage() {}

func (x *DelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelResponse.ProtoReflect.Descriptor instead.
func (*DelResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *DelResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DelResponse) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *DelResponse) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type WEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WEmpty) Reset() {
	*x = WEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WEmpty) ProtoMessage() {}

func (x *WEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WEmpty.ProtoReflect.Descriptor instead.
func (*WEmpty) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

type TargetShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// moveTo的grpc addr
	GrpcAddr string `protobuf:"bytes,1,opt,name=grpc_addr,json=grpcAddr,proto3" json:"grpc_addr,omitempty"`
	// 节点管理的ShardId
	ShardIds []uint64 `protobuf:"varint,2,rep,packed,name=shard_ids,json=shardIds,proto3" json:"shard_ids,omitempty"`
}

func (x *TargetShard) Reset() {
	*x = TargetShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetShard) ProtoMessage() {}

func (x *TargetShard) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetShard.ProtoReflect.Descriptor instead.
func (*TargetShard) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *TargetShard) GetGrpcAddr() string {
	if x != nil {
		return x.GrpcAddr
	}
	return ""
}

func (x *TargetShard) GetShardIds() []uint64 {
	if x != nil {
		return x.ShardIds
	}
	return nil
}

type ShardJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key: nodeId, val: bool
	Join map[uint64]bool `protobuf:"bytes,1,rep,name=join,proto3" json:"join,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ShardJoin) Reset() {
	*x = ShardJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardJoin) ProtoMessage() {}

func (x *ShardJoin) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardJoin.ProtoReflect.Descriptor instead.
func (*ShardJoin) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *ShardJoin) GetJoin() map[uint64]bool {
	if x != nil {
		return x.Join
	}
	return nil
}

type ShardInitialMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key: nodeId, val: target
	InitialMembers map[uint64]string `protobuf:"bytes,1,rep,name=initial_members,json=initialMembers,proto3" json:"initial_members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShardInitialMember) Reset() {
	*x = ShardInitialMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardInitialMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardInitialMember) ProtoMessage() {}

func (x *ShardInitialMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardInitialMember.ProtoReflect.Descriptor instead.
func (*ShardInitialMember) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *ShardInitialMember) GetInitialMembers() map[uint64]string {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

type RaftReleaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// raft Shard的分组个数, 用于hashKey计算ShardId
	MultiGroupSize uint32 `protobuf:"varint,1,opt,name=multi_group_size,json=multiGroupSize,proto3" json:"multi_group_size,omitempty"`
	// 节点ShardId分配的版本号
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// 本地的节点ID
	ReplicaId uint64 `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	// raft的通信端口号
	RaftPort uint32 `protobuf:"varint,4,opt,name=raft_port,json=raftPort,proto3" json:"raft_port,omitempty"`
	// 是否采用gossip方式启动
	Gossip bool `protobuf:"varint,5,opt,name=gossip,proto3" json:"gossip,omitempty"`
	// ShardId相应的节点是否是join的方式加入集群的
	// key: ShardId
	Join map[uint64]*ShardJoin `protobuf:"bytes,10,rep,name=join,proto3" json:"join,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ShardId的集群最初节点
	// key: ShardId
	InitialMembers map[uint64]*ShardInitialMember `protobuf:"bytes,11,rep,name=initial_members,json=initialMembers,proto3" json:"initial_members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 整个raft集群ShardIds和moveTo grpcAddr的分配情况
	// key: 当raft以nodehostid=true的方式起的时候是机器ID，以固定地址方式起是raftAddr
	TargetMap map[string]*TargetShard `protobuf:"bytes,20,rep,name=target_map,json=targetMap,proto3" json:"target_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// moveTo启动的grpc端口号
	GrpcPort uint32 `protobuf:"varint,21,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	// 以gossip方式启动时raft需配置的gossip配置
	RaftGossipConfig *RaftReleaseConfig_GossipConfig `protobuf:"bytes,22,opt,name=raft_gossip_config,json=raftGossipConfig,proto3" json:"raft_gossip_config,omitempty"`
	// 业务内部通过gossip协议交流数据的gossip配置
	BusinessGossipConfig *RaftReleaseConfig_GossipConfig `protobuf:"bytes,23,opt,name=business_gossip_config,json=businessGossipConfig,proto3" json:"business_gossip_config,omitempty"`
	// raft是否开启metrics
	Metrics bool `protobuf:"varint,24,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *RaftReleaseConfig) Reset() {
	*x = RaftReleaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftReleaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftReleaseConfig) ProtoMessage() {}

func (x *RaftReleaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftReleaseConfig.ProtoReflect.Descriptor instead.
func (*RaftReleaseConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *RaftReleaseConfig) GetMultiGroupSize() uint32 {
	if x != nil {
		return x.MultiGroupSize
	}
	return 0
}

func (x *RaftReleaseConfig) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RaftReleaseConfig) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RaftReleaseConfig) GetRaftPort() uint32 {
	if x != nil {
		return x.RaftPort
	}
	return 0
}

func (x *RaftReleaseConfig) GetGossip() bool {
	if x != nil {
		return x.Gossip
	}
	return false
}

func (x *RaftReleaseConfig) GetJoin() map[uint64]*ShardJoin {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *RaftReleaseConfig) GetInitialMembers() map[uint64]*ShardInitialMember {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

func (x *RaftReleaseConfig) GetTargetMap() map[string]*TargetShard {
	if x != nil {
		return x.TargetMap
	}
	return nil
}

func (x *RaftReleaseConfig) GetGrpcPort() uint32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *RaftReleaseConfig) GetRaftGossipConfig() *RaftReleaseConfig_GossipConfig {
	if x != nil {
		return x.RaftGossipConfig
	}
	return nil
}

func (x *RaftReleaseConfig) GetBusinessGossipConfig() *RaftReleaseConfig_GossipConfig {
	if x != nil {
		return x.BusinessGossipConfig
	}
	return nil
}

func (x *RaftReleaseConfig) GetMetrics() bool {
	if x != nil {
		return x.Metrics
	}
	return false
}

type RaftShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点ShardId分配的版本号
	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// 整个raft集群ShardIds和moveTo grpcAddr的分配情况
	// key: 当raft以nodehostid=true的方式起的时候是机器ID，以固定地址方式起是raftAddr
	TargetMap map[string]*TargetShard `protobuf:"bytes,2,rep,name=target_map,json=targetMap,proto3" json:"target_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ShardId相应的节点是否是join的方式加入集群的
	// key: ShardId
	Join map[uint64]*ShardJoin `protobuf:"bytes,3,rep,name=join,proto3" json:"join,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ShardId的集群最初节点
	// key: ShardId
	InitialMembers map[uint64]*ShardInitialMember `protobuf:"bytes,4,rep,name=initial_members,json=initialMembers,proto3" json:"initial_members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RaftShard) Reset() {
	*x = RaftShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftShard) ProtoMessage() {}

func (x *RaftShard) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftShard.ProtoReflect.Descriptor instead.
func (*RaftShard) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *RaftShard) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RaftShard) GetTargetMap() map[string]*TargetShard {
	if x != nil {
		return x.TargetMap
	}
	return nil
}

func (x *RaftShard) GetJoin() map[uint64]*ShardJoin {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *RaftShard) GetInitialMembers() map[uint64]*ShardInitialMember {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

type RaftShardIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardIds []uint64 `protobuf:"varint,1,rep,packed,name=shard_ids,json=shardIds,proto3" json:"shard_ids,omitempty"`
	Add      bool     `protobuf:"varint,2,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *RaftShardIds) Reset() {
	*x = RaftShardIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftShardIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftShardIds) ProtoMessage() {}

func (x *RaftShardIds) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftShardIds.ProtoReflect.Descriptor instead.
func (*RaftShardIds) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *RaftShardIds) GetShardIds() []uint64 {
	if x != nil {
		return x.ShardIds
	}
	return nil
}

func (x *RaftShardIds) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

type RaftInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gossip里同步的raft membership
	MemberInfos []*RaftInfoResponse_MemberInfo `protobuf:"bytes,1,rep,name=member_infos,json=memberInfos,proto3" json:"member_infos,omitempty"`
	// gossip里同步的集群分配信息
	ShardInfos *RaftInfoResponse_ShardInfo `protobuf:"bytes,2,opt,name=shard_infos,json=shardInfos,proto3" json:"shard_infos,omitempty"`
	// gossip用于检测MoveTo grpc地址的存活信息
	GossipInfos map[string]bool `protobuf:"bytes,3,rep,name=gossip_infos,json=gossipInfos,proto3" json:"gossip_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RaftInfoResponse) Reset() {
	*x = RaftInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftInfoResponse) ProtoMessage() {}

func (x *RaftInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftInfoResponse.ProtoReflect.Descriptor instead.
func (*RaftInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *RaftInfoResponse) GetMemberInfos() []*RaftInfoResponse_MemberInfo {
	if x != nil {
		return x.MemberInfos
	}
	return nil
}

func (x *RaftInfoResponse) GetShardInfos() *RaftInfoResponse_ShardInfo {
	if x != nil {
		return x.ShardInfos
	}
	return nil
}

func (x *RaftInfoResponse) GetGossipInfos() map[string]bool {
	if x != nil {
		return x.GossipInfos
	}
	return nil
}

// 新增、删除机器 | 为已存的机器添加shard
type RaftOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64   `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Target    string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	ShardIds  []uint64 `protobuf:"varint,3,rep,packed,name=shard_ids,json=shardIds,proto3" json:"shard_ids,omitempty"`
}

func (x *RaftOp) Reset() {
	*x = RaftOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftOp) ProtoMessage() {}

func (x *RaftOp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftOp.ProtoReflect.Descriptor instead.
func (*RaftOp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *RaftOp) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RaftOp) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RaftOp) GetShardIds() []uint64 {
	if x != nil {
		return x.ShardIds
	}
	return nil
}

type RaftReleaseConfig_GossipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gossip的端口号
	GossipPort uint32 `protobuf:"varint,1,opt,name=gossip_port,json=gossipPort,proto3" json:"gossip_port,omitempty"`
	// gossip集群地址
	GossipSeeds []string `protobuf:"bytes,2,rep,name=gossip_seeds,json=gossipSeeds,proto3" json:"gossip_seeds,omitempty"`
}

func (x *RaftReleaseConfig_GossipConfig) Reset() {
	*x = RaftReleaseConfig_GossipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftReleaseConfig_GossipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftReleaseConfig_GossipConfig) ProtoMessage() {}

func (x *RaftReleaseConfig_GossipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftReleaseConfig_GossipConfig.ProtoReflect.Descriptor instead.
func (*RaftReleaseConfig_GossipConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 0}
}

func (x *RaftReleaseConfig_GossipConfig) GetGossipPort() uint32 {
	if x != nil {
		return x.GossipPort
	}
	return 0
}

func (x *RaftReleaseConfig_GossipConfig) GetGossipSeeds() []string {
	if x != nil {
		return x.GossipSeeds
	}
	return nil
}

type RaftInfoResponse_MemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId        uint64            `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ConfigChangeId uint64            `protobuf:"varint,2,opt,name=config_change_id,json=configChangeId,proto3" json:"config_change_id,omitempty"`
	Replicas       map[uint64]string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LeaderId       uint64            `protobuf:"varint,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	LeaderValid    bool              `protobuf:"varint,5,opt,name=leader_valid,json=leaderValid,proto3" json:"leader_valid,omitempty"`
	Observers      map[uint64]string `protobuf:"bytes,6,rep,name=observers,proto3" json:"observers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RaftInfoResponse_MemberInfo) Reset() {
	*x = RaftInfoResponse_MemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftInfoResponse_MemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftInfoResponse_MemberInfo) ProtoMessage() {}

func (x *RaftInfoResponse_MemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftInfoResponse_MemberInfo.ProtoReflect.Descriptor instead.
func (*RaftInfoResponse_MemberInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RaftInfoResponse_MemberInfo) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *RaftInfoResponse_MemberInfo) GetConfigChangeId() uint64 {
	if x != nil {
		return x.ConfigChangeId
	}
	return 0
}

func (x *RaftInfoResponse_MemberInfo) GetReplicas() map[uint64]string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *RaftInfoResponse_MemberInfo) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *RaftInfoResponse_MemberInfo) GetLeaderValid() bool {
	if x != nil {
		return x.LeaderValid
	}
	return false
}

func (x *RaftInfoResponse_MemberInfo) GetObservers() map[uint64]string {
	if x != nil {
		return x.Observers
	}
	return nil
}

type RaftInfoResponse_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []string `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *RaftInfoResponse_Target) Reset() {
	*x = RaftInfoResponse_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftInfoResponse_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftInfoResponse_Target) ProtoMessage() {}

func (x *RaftInfoResponse_Target) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftInfoResponse_Target.ProtoReflect.Descriptor instead.
func (*RaftInfoResponse_Target) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13, 1}
}

func (x *RaftInfoResponse_Target) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type RaftInfoResponse_ShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision int64                               `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Targets  map[string]*TargetShard             `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Shards   map[uint64]*RaftInfoResponse_Target `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RaftInfoResponse_ShardInfo) Reset() {
	*x = RaftInfoResponse_ShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftInfoResponse_ShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftInfoResponse_ShardInfo) ProtoMessage() {}

func (x *RaftInfoResponse_ShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftInfoResponse_ShardInfo.ProtoReflect.Descriptor instead.
func (*RaftInfoResponse_ShardInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13, 2}
}

func (x *RaftInfoResponse_ShardInfo) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RaftInfoResponse_ShardInfo) GetTargets() map[string]*TargetShard {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *RaftInfoResponse_ShardInfo) GetShards() map[uint64]*RaftInfoResponse_Target {
	if x != nil {
		return x.Shards
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30,
	0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4d, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x08, 0x0a, 0x06,
	0x57, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22,
	0x6e, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x04,
	0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa9, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x07, 0x0a, 0x11,
	0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x66, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x4f, 0x0a,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a,
	0x12, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x61, 0x66, 0x74,
	0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x16,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x52, 0x0a,
	0x0c, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x65, 0x65, 0x64,
	0x73, 0x1a, 0x43, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a,
	0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x03, 0x0a, 0x09, 0x52,
	0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x28,
	0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x1a, 0x4a, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x56, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0c, 0x52, 0x61,
	0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64, 0x64, 0x22, 0xac, 0x08, 0x0a, 0x10, 0x52, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x3c, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x45, 0x0a,
	0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x9f, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x49, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x22, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0xcb, 0x02, 0x0a, 0x09, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x48, 0x0a, 0x0c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x47, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x06, 0x52, 0x61, 0x66, 0x74,
	0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x32, 0x70, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x22, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x0b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x22, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x0b, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc6, 0x02, 0x0a, 0x0b, 0x52, 0x61, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x07, 0x2e, 0x57, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x0a,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x1a, 0x07, 0x2e, 0x57, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x0d, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x1a, 0x07, 0x2e, 0x57, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x52, 0x61, 0x66, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x07, 0x2e, 0x57, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x11, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x07,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x4f, 0x70, 0x1a, 0x07, 0x2e, 0x57, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x24, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x07, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4f, 0x70, 0x1a, 0x07, 0x2e,
	0x57, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x07, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x4f, 0x70, 0x1a, 0x07, 0x2e, 0x57, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_api_proto_goTypes = []interface{}{
	(*GetRequest)(nil),                     // 0: GetRequest
	(*GetResponse)(nil),                    // 1: GetResponse
	(*PutRequest)(nil),                     // 2: PutRequest
	(*PutResponse)(nil),                    // 3: PutResponse
	(*DelRequest)(nil),                     // 4: DelRequest
	(*DelResponse)(nil),                    // 5: DelResponse
	(*WEmpty)(nil),                         // 6: WEmpty
	(*TargetShard)(nil),                    // 7: TargetShard
	(*ShardJoin)(nil),                      // 8: ShardJoin
	(*ShardInitialMember)(nil),             // 9: ShardInitialMember
	(*RaftReleaseConfig)(nil),              // 10: RaftReleaseConfig
	(*RaftShard)(nil),                      // 11: RaftShard
	(*RaftShardIds)(nil),                   // 12: RaftShardIds
	(*RaftInfoResponse)(nil),               // 13: RaftInfoResponse
	(*RaftOp)(nil),                         // 14: RaftOp
	nil,                                    // 15: ShardJoin.JoinEntry
	nil,                                    // 16: ShardInitialMember.InitialMembersEntry
	(*RaftReleaseConfig_GossipConfig)(nil), // 17: RaftReleaseConfig.GossipConfig
	nil,                                    // 18: RaftReleaseConfig.JoinEntry
	nil,                                    // 19: RaftReleaseConfig.InitialMembersEntry
	nil,                                    // 20: RaftReleaseConfig.TargetMapEntry
	nil,                                    // 21: RaftShard.TargetMapEntry
	nil,                                    // 22: RaftShard.JoinEntry
	nil,                                    // 23: RaftShard.InitialMembersEntry
	(*RaftInfoResponse_MemberInfo)(nil),    // 24: RaftInfoResponse.MemberInfo
	(*RaftInfoResponse_Target)(nil),        // 25: RaftInfoResponse.Target
	(*RaftInfoResponse_ShardInfo)(nil),     // 26: RaftInfoResponse.ShardInfo
	nil,                                    // 27: RaftInfoResponse.GossipInfosEntry
	nil,                                    // 28: RaftInfoResponse.MemberInfo.ReplicasEntry
	nil,                                    // 29: RaftInfoResponse.MemberInfo.ObserversEntry
	nil,                                    // 30: RaftInfoResponse.ShardInfo.TargetsEntry
	nil,                                    // 31: RaftInfoResponse.ShardInfo.ShardsEntry
}
var file_api_proto_depIdxs = []int32{
	15, // 0: ShardJoin.join:type_name -> ShardJoin.JoinEntry
	16, // 1: ShardInitialMember.initial_members:type_name -> ShardInitialMember.InitialMembersEntry
	18, // 2: RaftReleaseConfig.join:type_name -> RaftReleaseConfig.JoinEntry
	19, // 3: RaftReleaseConfig.initial_members:type_name -> RaftReleaseConfig.InitialMembersEntry
	20, // 4: RaftReleaseConfig.target_map:type_name -> RaftReleaseConfig.TargetMapEntry
	17, // 5: RaftReleaseConfig.raft_gossip_config:type_name -> RaftReleaseConfig.GossipConfig
	17, // 6: RaftReleaseConfig.business_gossip_config:type_name -> RaftReleaseConfig.GossipConfig
	21, // 7: RaftShard.target_map:type_name -> RaftShard.TargetMapEntry
	22, // 8: RaftShard.join:type_name -> RaftShard.JoinEntry
	23, // 9: RaftShard.initial_members:type_name -> RaftShard.InitialMembersEntry
	24, // 10: RaftInfoResponse.member_infos:type_name -> RaftInfoResponse.MemberInfo
	26, // 11: RaftInfoResponse.shard_infos:type_name -> RaftInfoResponse.ShardInfo
	27, // 12: RaftInfoResponse.gossip_infos:type_name -> RaftInfoResponse.GossipInfosEntry
	8,  // 13: RaftReleaseConfig.JoinEntry.value:type_name -> ShardJoin
	9,  // 14: RaftReleaseConfig.InitialMembersEntry.value:type_name -> ShardInitialMember
	7,  // 15: RaftReleaseConfig.TargetMapEntry.value:type_name -> TargetShard
	7,  // 16: RaftShard.TargetMapEntry.value:type_name -> TargetShard
	8,  // 17: RaftShard.JoinEntry.value:type_name -> ShardJoin
	9,  // 18: RaftShard.InitialMembersEntry.value:type_name -> ShardInitialMember
	28, // 19: RaftInfoResponse.MemberInfo.replicas:type_name -> RaftInfoResponse.MemberInfo.ReplicasEntry
	29, // 20: RaftInfoResponse.MemberInfo.observers:type_name -> RaftInfoResponse.MemberInfo.ObserversEntry
	30, // 21: RaftInfoResponse.ShardInfo.targets:type_name -> RaftInfoResponse.ShardInfo.TargetsEntry
	31, // 22: RaftInfoResponse.ShardInfo.shards:type_name -> RaftInfoResponse.ShardInfo.ShardsEntry
	7,  // 23: RaftInfoResponse.ShardInfo.TargetsEntry.value:type_name -> TargetShard
	25, // 24: RaftInfoResponse.ShardInfo.ShardsEntry.value:type_name -> RaftInfoResponse.Target
	0,  // 25: KV.Get:input_type -> GetRequest
	2,  // 26: KV.Put:input_type -> PutRequest
	4,  // 27: KV.Del:input_type -> DelRequest
	10, // 28: RaftControl.ReleaseRaftConf:input_type -> RaftReleaseConfig
	11, // 29: RaftControl.ReleaseRaftShard:input_type -> RaftShard
	12, // 30: RaftControl.UpdateRaftShardIds:input_type -> RaftShardIds
	6,  // 31: RaftControl.RaftShardInfo:input_type -> WEmpty
	14, // 32: RaftControl.AddRaftObserverReplica:input_type -> RaftOp
	14, // 33: RaftControl.AddRaftReplica:input_type -> RaftOp
	14, // 34: RaftControl.RemoveRaftReplica:input_type -> RaftOp
	1,  // 35: KV.Get:output_type -> GetResponse
	3,  // 36: KV.Put:output_type -> PutResponse
	5,  // 37: KV.Del:output_type -> DelResponse
	6,  // 38: RaftControl.ReleaseRaftConf:output_type -> WEmpty
	6,  // 39: RaftControl.ReleaseRaftShard:output_type -> WEmpty
	6,  // 40: RaftControl.UpdateRaftShardIds:output_type -> WEmpty
	13, // 41: RaftControl.RaftShardInfo:output_type -> RaftInfoResponse
	6,  // 42: RaftControl.AddRaftObserverReplica:output_type -> WEmpty
	6,  // 43: RaftControl.AddRaftReplica:output_type -> WEmpty
	6,  // 44: RaftControl.RemoveRaftReplica:output_type -> WEmpty
	35, // [35:45] is the sub-list for method output_type
	25, // [25:35] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardInitialMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftReleaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftShardIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftReleaseConfig_GossipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftInfoResponse_MemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftInfoResponse_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftInfoResponse_ShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KVClient is the client API for KV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type kVClient struct {
	cc grpc.ClientConnInterface
}

func NewKVClient(cc grpc.ClientConnInterface) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/KV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/KV/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, "/KV/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServer is the server API for KV service.
type KVServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
}

// UnimplementedKVServer can be embedded to have forward compatible implementations.
type UnimplementedKVServer struct {
}

func (*UnimplementedKVServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedKVServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedKVServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}

func RegisterKVServer(s *grpc.Server, srv KVServer) {
	s.RegisterService(&_KV_serviceDesc, srv)
}

func _KV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KV/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KV_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _KV_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _KV_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// RaftControlClient is the client API for RaftControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftControlClient interface {
	// 控制中心向raft集群下发启动的metadata和集群的分配情况
	ReleaseRaftConf(ctx context.Context, in *RaftReleaseConfig, opts ...grpc.CallOption) (*WEmpty, error)
	// 控制中心更新集群分配信息
	ReleaseRaftShard(ctx context.Context, in *RaftShard, opts ...grpc.CallOption) (*WEmpty, error)
	// 控制中心在Join或Leave ShardIds后通知raft集群修改相应ShardId的state machine
	UpdateRaftShardIds(ctx context.Context, in *RaftShardIds, opts ...grpc.CallOption) (*WEmpty, error)
	// raft集群概要
	RaftShardInfo(ctx context.Context, in *WEmpty, opts ...grpc.CallOption) (*RaftInfoResponse, error)
	// 新增observer节点
	AddRaftObserverReplica(ctx context.Context, in *RaftOp, opts ...grpc.CallOption) (*WEmpty, error)
	// 新增raft节点
	AddRaftReplica(ctx context.Context, in *RaftOp, opts ...grpc.CallOption) (*WEmpty, error)
	// 删除raft节点
	RemoveRaftReplica(ctx context.Context, in *RaftOp, opts ...grpc.CallOption) (*WEmpty, error)
}

type raftControlClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftControlClient(cc grpc.ClientConnInterface) RaftControlClient {
	return &raftControlClient{cc}
}

func (c *raftControlClient) ReleaseRaftConf(ctx context.Context, in *RaftReleaseConfig, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/RaftControl/ReleaseRaftConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftControlClient) ReleaseRaftShard(ctx context.Context, in *RaftShard, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/RaftControl/ReleaseRaftShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftControlClient) UpdateRaftShardIds(ctx context.Context, in *RaftShardIds, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/RaftControl/UpdateRaftShardIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftControlClient) RaftShardInfo(ctx context.Context, in *WEmpty, opts ...grpc.CallOption) (*RaftInfoResponse, error) {
	out := new(RaftInfoResponse)
	err := c.cc.Invoke(ctx, "/RaftControl/RaftShardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftControlClient) AddRaftObserverReplica(ctx context.Context, in *RaftOp, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/RaftControl/AddRaftObserverReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftControlClient) AddRaftReplica(ctx context.Context, in *RaftOp, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/RaftControl/AddRaftReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftControlClient) RemoveRaftReplica(ctx context.Context, in *RaftOp, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/RaftControl/RemoveRaftReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftControlServer is the server API for RaftControl service.
type RaftControlServer interface {
	// 控制中心向raft集群下发启动的metadata和集群的分配情况
	ReleaseRaftConf(context.Context, *RaftReleaseConfig) (*WEmpty, error)
	// 控制中心更新集群分配信息
	ReleaseRaftShard(context.Context, *RaftShard) (*WEmpty, error)
	// 控制中心在Join或Leave ShardIds后通知raft集群修改相应ShardId的state machine
	UpdateRaftShardIds(context.Context, *RaftShardIds) (*WEmpty, error)
	// raft集群概要
	RaftShardInfo(context.Context, *WEmpty) (*RaftInfoResponse, error)
	// 新增observer节点
	AddRaftObserverReplica(context.Context, *RaftOp) (*WEmpty, error)
	// 新增raft节点
	AddRaftReplica(context.Context, *RaftOp) (*WEmpty, error)
	// 删除raft节点
	RemoveRaftReplica(context.Context, *RaftOp) (*WEmpty, error)
}

// UnimplementedRaftControlServer can be embedded to have forward compatible implementations.
type UnimplementedRaftControlServer struct {
}

func (*UnimplementedRaftControlServer) ReleaseRaftConf(context.Context, *RaftReleaseConfig) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseRaftConf not implemented")
}
func (*UnimplementedRaftControlServer) ReleaseRaftShard(context.Context, *RaftShard) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseRaftShard not implemented")
}
func (*UnimplementedRaftControlServer) UpdateRaftShardIds(context.Context, *RaftShardIds) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRaftShardIds not implemented")
}
func (*UnimplementedRaftControlServer) RaftShardInfo(context.Context, *WEmpty) (*RaftInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftShardInfo not implemented")
}
func (*UnimplementedRaftControlServer) AddRaftObserverReplica(context.Context, *RaftOp) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRaftObserverReplica not implemented")
}
func (*UnimplementedRaftControlServer) AddRaftReplica(context.Context, *RaftOp) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRaftReplica not implemented")
}
func (*UnimplementedRaftControlServer) RemoveRaftReplica(context.Context, *RaftOp) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRaftReplica not implemented")
}

func RegisterRaftControlServer(s *grpc.Server, srv RaftControlServer) {
	s.RegisterService(&_RaftControl_serviceDesc, srv)
}

func _RaftControl_ReleaseRaftConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftReleaseConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).ReleaseRaftConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/ReleaseRaftConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).ReleaseRaftConf(ctx, req.(*RaftReleaseConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftControl_ReleaseRaftShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftShard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).ReleaseRaftShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/ReleaseRaftShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).ReleaseRaftShard(ctx, req.(*RaftShard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftControl_UpdateRaftShardIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftShardIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).UpdateRaftShardIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/UpdateRaftShardIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).UpdateRaftShardIds(ctx, req.(*RaftShardIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftControl_RaftShardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).RaftShardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/RaftShardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).RaftShardInfo(ctx, req.(*WEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftControl_AddRaftObserverReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).AddRaftObserverReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/AddRaftObserverReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).AddRaftObserverReplica(ctx, req.(*RaftOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftControl_AddRaftReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).AddRaftReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/AddRaftReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).AddRaftReplica(ctx, req.(*RaftOp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftControl_RemoveRaftReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftControlServer).RemoveRaftReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftControl/RemoveRaftReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftControlServer).RemoveRaftReplica(ctx, req.(*RaftOp))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RaftControl",
	HandlerType: (*RaftControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReleaseRaftConf",
			Handler:    _RaftControl_ReleaseRaftConf_Handler,
		},
		{
			MethodName: "ReleaseRaftShard",
			Handler:    _RaftControl_ReleaseRaftShard_Handler,
		},
		{
			MethodName: "UpdateRaftShardIds",
			Handler:    _RaftControl_UpdateRaftShardIds_Handler,
		},
		{
			MethodName: "RaftShardInfo",
			Handler:    _RaftControl_RaftShardInfo_Handler,
		},
		{
			MethodName: "AddRaftObserverReplica",
			Handler:    _RaftControl_AddRaftObserverReplica_Handler,
		},
		{
			MethodName: "AddRaftReplica",
			Handler:    _RaftControl_AddRaftReplica_Handler,
		},
		{
			MethodName: "RemoveRaftReplica",
			Handler:    _RaftControl_RemoveRaftReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
